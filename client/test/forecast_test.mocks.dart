// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/forecast_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:client/classes/forecast.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:realm/realm.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRealm_0 extends _i1.SmartFake implements _i2.Realm {
  _FakeRealm_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForecastDB].
///
/// See the documentation for Mockito's code generation for more information.
class MockForecastDB extends _i1.Mock implements _i3.ForecastDB {
  MockForecastDB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Realm get realm => (super.noSuchMethod(
        Invocation.getter(#realm),
        returnValue: _FakeRealm_0(
          this,
          Invocation.getter(#realm),
        ),
      ) as _i2.Realm);
  @override
  set realm(_i2.Realm? _realm) => super.noSuchMethod(
        Invocation.setter(
          #realm,
          _realm,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic initF(_i2.User? user) => super.noSuchMethod(Invocation.method(
        #initF,
        [user],
      ));
  @override
  _i4.Future<dynamic> callFetchForecast() => (super.noSuchMethod(
        Invocation.method(
          #callFetchForecast,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  double getPropertyValue(
    String? propertyName,
    _i3.Forecast? forecast,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPropertyValue,
          [
            propertyName,
            forecast,
          ],
        ),
        returnValue: 0.0,
      ) as double);
}
